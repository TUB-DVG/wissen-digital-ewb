"""
Django settings for webcentral_app project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# tries to read the DEBUG env-var and converts it to int.
# If it cant convert to int, DEBUG is set to 0, which is converted to false.
DEBUG = bool(int(os.environ.get("DEBUG", 0)))

ALLOWED_HOSTS = ["134.94.32.53", ".kfa-juelich.de", "85.214.114.204"]
ALLOWED_HOSTS.extend(
    filter(
        None,
        os.environ.get("ALLOWED_HOSTS", "").split(","),
    )
)

# Application definition

INSTALLED_APPS = [
    "modeltranslation",
    "csp",
    "criteria_catalog.apps.CriteriacatalogConfig",
    "component_list.apps.ComponentListConfig",
    "businessModel.apps.BusinessmodelConfig",
    "positive_environmental_impact.apps.PositiveEnvironmentalImpactConfig",
    "publications.apps.PublicationsConfig",
    "use_cases.apps.UseCasesConfig",
    "pages.apps.PagesConfig",
    "TechnicalStandards.apps.TechnicalStandardsConfig",
    "protocols.apps.ProtocolsConfig",
    "project_listing.apps.ProjectListingConfig",
    "tools_over.apps.ToolsOverConfig",
    "weatherdata_over.apps.WeatherdataOverConfig",
    "keywords.apps.KeywordsConfig",
    "LastProfile.apps.LastprofileConfig",
    "Datasets.apps.DatasetsConfig",
    "user_integration.apps.UserIntegrationConfig",
    "data_sufficiency.apps.DataSufficiencyConfig",
    "django.contrib.humanize",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "django_plotly_dash",
    "common.apps.CommonConfig",
    "channels",
    "webpack_loader",
]

MIDDLEWARE = [
    "csp.middleware.CSPMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # "common.middleware.SessionExpiration",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_plotly_dash.middleware.BaseMiddleware",
]

SERIALIZATION_MODULES = {
    "custom_json": "common.serializers",
}
# Content Security Policy
CSP_IMG_SRC = ("'self'", "data:image/webp*")
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",
    # "'strict-dynamic'",
    "https://fonts.googleapis.com",
    "https://cdn.jsdelivr.net",
    "https://cdn.rawgit.com/harvesthq/chosen/gh-pages/chosen.min.css",
    "https://cdn.jsdelivr.net/npm/use-bootstrap-select@2.1.1/dist/use-bootstrap-select.min.css",
)
CSP_SCRIPT_SRC = (
    "'self'",
    "https://ajax.googleapis.com",
    "https://cdnjs.cloudflare.com",
    "https://maxcdn.bootstrapcdn.com",
    "https://cdn.plot.ly",
    "https://unpkg.com",
    "https://code.highcharts.com/highcharts.js",
    "https://cdn.jsdelivr.net/gh/harvesthq/chosen@1.8.7/chosen.jquery.min.js",
    "https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js",
    "https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js",
    "https://cdn.jsdelivr.net/npm/bootstrap-select@1.14.0-beta3/dist/js/bootstrap-select.min.js",
    "https://cdn.jsdelivr.net/npm/use-bootstrap-select@2.1.1/dist/use-bootstrap-select.min.js",
    # "'sha256-jZlsGVOhUAIcH+4PVs7QuGZkthRMgvT2n0ilH6/zTM0=%'",
    "'unsafe-inline'",
    "'unsafe-eval'",
    # "'strict-dynamic'",
)
CSP_DEFAULT_SRC = (
    "'self'",
    # "'strict-dynamic'",
    "https://fonts.gstatic.com",
    "https://cdn.jsdelivr.net",
)
CSP_FRAME_ANCESTORS = ("'self'",)
CSP_FRAME_SRC = ("'self'",)
CSP_FORM_ACTION = ("'self'",)
CSP_BASE_URI = ("'self'",)
# CSP_INCLUDE_NONCE_IN=['script-src', 'style-src']
ROOT_URLCONF = "webcentral_app.urls"

CSRF_TRUSTED_ORIGINS = [
    "https://wissen-digital-ewb.de",
    "https://www.wissen-digital-ewb.de",
    "https://134.94.32.53",
    "https://85.214.114.204",
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [Path.joinpath(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "webcentral_app.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": "database",
        "TEST": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "test2_" + os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": "database",
            "MIGRATE": False,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# LANGUAGES = [
#     ('en', ('English')),
#     ('de', ('German')),
# ]
# gettext = lambda s: s
LANGUAGES = (
    ("de", ("German")),
    ("en", ("English")),
)

LANGUAGE_CODE = "de"
MODELTRANSLATION_DEFAULT_LANGUAGE = "de"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# PARLER_LANGUAGES = {
#     None: (
#         {'code': 'de', },
#         {'code': 'en',},
#     ),
#     'default': {
#         'fallback': 'de',             # defaults to PARLER_DEFAULT_LANGUAGE_CODE
#         'hide_untranslated': False,   # the default; let .active_translations()       return fallbacks too.
#     }
# }

X_FRAME_OPTIONS = "SAMEORIGIN"

CRISPY_TEMPLATE_PACK = "bootstrap4"

ASGI_APPLICATION = "webcentral_app.routing.application"
"""
CHANNEL_LAYERS={
    'default':{
        'BACKEND':'channels_redis.core.RdisChannelLayer',
        'CONFIG':{
            'hosts': [('127.0.0.1',6379),], # This might need to be implemented when working on the server
        }
    }
}
"""
LOCALE_PATHS = (
    os.path.join(BASE_DIR, "locale"),
    # os.path.join(BASE_DIR, "yourapp/locale"),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
nameOfUnpriviledUser = os.environ.get("WEBCENTRAL_UNPRIVILEGED_USER")
# STATIC_ROOT= Path.joinpath(BASE_DIR, 'static')
if os.environ.get("MODE") == "production":
    STATIC_ROOT = f"/home/{nameOfUnpriviledUser}/webcentral/static"
    STATIC_URL = "/static/static/"
    STATICFILES_DIRS = [Path.joinpath(BASE_DIR, "webcentral_app/static")]
    # Media folder settings
    # MEDIA_ROOT=Path.joinpath(BASE_DIR,'media')
    MEDIA_ROOT = f"/home/{nameOfUnpriviledUser}/webcentral/media"
    MEDIA_URL = "/media/"
    # CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_SAMESITE = "Strict"
    SECURE_HSTS_SECONDS = 10
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    # CSRF_USE_SESSIONS = True
    SECURE_BROWSER_XSS_FILTER = True
    loggingDir = "/home/webcentraluser/djangoLog"
else:
    # CSRF_USE_SESSIONS = True
    STATIC_ROOT = Path.joinpath(BASE_DIR, "static")
    STATIC_URL = "/static/"
    STATICFILES_DIRS = [Path.joinpath(BASE_DIR, "webcentral_app/static")]
    # Media folder settings
    MEDIA_ROOT = Path.joinpath(BASE_DIR, "media")
    MEDIA_URL = "/media/"
    loggingDir = "/webcentral/djangoLog"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",
    },
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

useDotENV = bool(int(os.environ.get("USE_DOT_ENV", 0)))
if not useDotENV:
    try:
        from webcentral_app.local_settings import *
    except ImportError:
        pass
WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "/webpack_bundles/",
        "CACHE": not DEBUG,
        "STATS_FILE": os.path.join(BASE_DIR, "webpack-stats.json"),
        "POLL_INTERVAL": 0.1,
        "IGNORE": [r".+\.hot-update.js", r".+\.map"],
    }
}
