#!/bin/bash
# Check if command is provided
if [ -z "$1" ]
then
    echo "No command provided. Usage: ./run command"
    exit 1
fi
source .env
# Set command
command=$1

# Set Docker container ID
container_id=webcentral

# Get current working directory inside the webcentral container
currentDirInContainer=$(docker exec $container_id pwd)

# Execute different actions based on the command
case $command in
    "build")
        if [ -z "$2" ]
        then
            echo "Please Specify as a second argument, which docker-environment you want to build. Possible options are: dev, prod"
            exit 1
        else
            if [ "$2" = "dev" ]; then
                echo "Building development environment..."
                docker-compose -f docker-compose.yml -f docker-compose.dev.yml build
                exit 1
            fi
            if [ "$2" = "prod" ]; then
                echo "Building production environment..."
                docker-compose -f docker-compose.yml -f docker-compose.prod.yml build
                exit 1
            fi
        fi
        ;;
    "copy_files_to_server")
        # Check if a directory was provided
        echo "Please make sure that you have name-resolving for server ip-address activated."
        echo "The name vserver should resolve to the ip-address of the server."
        echo "In linux, that can be done by changing the /etc/hosts file."
        if [ -z "$1" ]
        then
            echo "Please provide a directory, which should be copied to the server. Usage: ./run copy_files_to_server path/to/directory"
            exit 1
        fi

        # Set the local directory
        local_dir=$1

        # Set the remote directory
        remote_dir="~/src/01_application/webcentral_app/media"

        # Set the server username and hostname
        server="djangoadmin@vserver"

        # Copy the files
        scp -r $local_dir $server:$remote_dir

        # Check if the copy was successful
        if [ $? -eq 0 ]
        then
            echo "Files copied successfully."
        else
            echo "An error occurred while copying the files."
        fi
        ;;
    "copy_media_files_into_prod")
        echo "This command can be excuted on the server to copy all media-files into the production environment-container."

        docker cp ~/src/01_application/webcentral_app/media/. webcentral:/home/$WEBCENTRAL_UNPRIVILEGED_USER/webcentral/media/
        ;;
    "down")
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml down
        ;;
    "data_import")
        if [ -z "$2" ]
        then
            echo "No path to an input-filename is provided. Usage: ./run data_import path/to/input-filename"
            exit 1
        fi
        if [ -z "$3" ]
        then
            docker exec -w $currentDirInContainer/01_application/webcentral_app -it $container_id python manage.py data_import ../../$2 ../../postgres/
        fi
        ;;
    "delete_db")
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml down --volumes
        ;;
    "dump_db")
        
        if [ -z "$2" ]
        then
            echo "No path to an output-filename is provided. Using filename postgres/dump.sql"
            docker exec -i database pg_dump -U ${POSTGRES_USER} ${POSTGRES_DB} > postgres/dump.sql
        else
            echo "Dumping database to file $2"
            docker exec -i database pg_dump -U ${POSTGRES_USER} ${POSTGRES_DB} > $2
        fi
        ;;
    "execute_db_changes")
        if [ -z "$2" ]
        then
            echo "No path to an input-filename is provided. Usage: ./run execute_db_changes path/to/input-filename"
            exit 1
        fi
        docker exec -w $currentDirInContainer/01_application/webcentral_app -it $container_id python manage.py execute_db_changes ../../$2
        ;;
    "migrate")
        echo "Running Django migrations..."
        docker exec -it $container_id python 01_application/webcentral_app/manage.py migrate
        ;;
    "makemigrations")
        echo "Creating Django migrations..."
        docker exec -it $container_id python 01_application/webcentral_app/manage.py makemigrations
        ;;
    "shell")
        echo "Creating Django migrations..."
        docker exec -it $container_id python 01_application/webcentral_app/manage.py shell
        ;;

    "restore_db")
        source .env
        if [ -z "$2" ]
        then
            echo "No path to an input-filename is provided. Using file $DATABASE_PLAIN_SQL_FILE"
            cat postgres/${DATABASE_PLAIN_SQL_FILE} | docker exec -i database psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}
        else
            echo "Restoring database with file $2"
            cat $2 | docker exec -i database psql -U ${POSTGRES_USER} -d ${POSTGRES_DB}
        fi
        ;;

    "test")
        if [ -z "$2" ]
        then
            echo "No test-type specified. Possible types are Database, Selenium. Usage: ./run test test-type"   
            exit 1
        fi
        if [ "$2" = "Database" ]; then
            docker exec -w $currentDirInContainer/01_application/webcentral_app -it $container_id python manage.py test tests/ testDatabaseFilling.checkDifferencesInDatabase
            exit 1
        fi
        if [ "$2" = "Selenium" ]; then
            set -a
            . ./.env
            set +a

            cd 02_work_doc/10_test/06_seleniumSystemTests/
            . ../testingVenv/bin/activate
            if [-z "$3" ]
            then
              siteUnderTest=http://127.0.0.1:8000 HEADLESS=1 python Test/TestSuite/TestRunner.py
            else
              siteUnderTest=$3 HEADLESS=0 python Test/TestSuite/TestRunner.py
            fi
            deactivate
            cd ../../../
        fi
        ;;
    "up")
        if [ -z "$2" ]
        then
            echo "Please Specify as a second argument, which docker-environment you want to start. Possible options are: dev, prod"
            exit 1
        else
            if [ "$2" = "dev" ]; then
                echo "Starting development environment..."
                docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
                exit 1
            fi
            if [ "$2" = "prod" ]; then
                echo "Startin production environment..."
                docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
                exit 1
            fi
        fi
        ;;
    *)
        echo "Unknown command: $command"
        exit 1
        ;;
esac
