# Generated by Django 3.2.18 on 2023-11-29 15:16

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('TechnicalStandards', '0001_initial'),
        ('project_listing', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accessibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessibility', models.CharField(blank=True, help_text='userInterface', max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('applicationArea', models.CharField(blank=True, help_text='application area', max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('classification', models.CharField(help_text='Classification Category', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Focus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('focus', models.CharField(help_text='Focus of the Tool', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='LifeCyclePhase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lifeCyclePhase', models.CharField(blank=True, help_text='Life cycle phase of buildings where the application is used', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Scale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scale', models.CharField(blank=True, help_text='spatial scope of consideration', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TargetGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('targetGroup', models.CharField(blank=True, help_text='Which group of people is the tool targeted at?', max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Usage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage', models.CharField(blank=True, help_text='usage', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='UserInterface',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userInterface', models.CharField(blank=True, help_text='userInterface', max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Tools',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='name', max_length=150)),
                ('shortDescription', models.CharField(blank=True, help_text='short description', max_length=1000)),
                ('userInterfaceNotes', models.CharField(blank=True, help_text='additional notes for userInterface', max_length=300)),
                ('lastUpdate', models.CharField(blank=True, help_text='time (year/month/date) of the last update', max_length=100)),
                ('licence', models.CharField(blank=True, help_text='licence', max_length=500)),
                ('licenceNotes', models.CharField(blank=True, help_text='licence notes', max_length=500)),
                ('furtherInformation', models.CharField(blank=True, help_text='further information', max_length=500)),
                ('alternatives', models.CharField(blank=True, help_text='similar tool(s) that can serve as alternatives', max_length=300)),
                ('provider', models.CharField(blank=True, max_length=300)),
                ('released', models.BooleanField(blank=True, help_text='whether the tool is released or not', null=True)),
                ('releasedPlanned', models.BooleanField(blank=True, help_text='whether publication is planned', null=True)),
                ('yearOfRelease', models.CharField(blank=True, help_text='year of software release (planned or conducted)', max_length=100)),
                ('resources', models.CharField(blank=True, help_text='documentation, literature, git-Repos, etc.', max_length=1000)),
                ('developmentState', models.IntegerField(choices=[(1, 'pre-alpha'), (2, 'alpha'), (3, 'beta'), (4, 'release candidate'), (5, 'release')], null=True)),
                ('programmingLanguages', models.CharField(blank=True, max_length=500)),
                ('frameworksLibraries', models.CharField(blank=True, max_length=500)),
                ('databaseSystem', models.CharField(blank=True, max_length=500)),
                ('image', models.ImageField(blank=True, null=True, upload_to='')),
                ('accessibility', models.ManyToManyField(to='tools_over.Accessibility')),
                ('applicationArea', models.ManyToManyField(to='tools_over.ApplicationArea')),
                ('classification', models.ManyToManyField(to='tools_over.Classification')),
                ('focus', models.ManyToManyField(to='tools_over.Focus')),
                ('lifeCyclePhase', models.ManyToManyField(to='tools_over.LifeCyclePhase')),
                ('scale', models.ManyToManyField(to='tools_over.Scale')),
                ('specificApplication', models.ManyToManyField(help_text='specific application of the tool in EWB projects (project name + fkz)', to='project_listing.Subproject')),
                ('targetGroup', models.ManyToManyField(to='tools_over.TargetGroup')),
                ('technicalStandardsNorms', models.ManyToManyField(to='TechnicalStandards.Norm')),
                ('technicalStandardsProtocols', models.ManyToManyField(to='TechnicalStandards.Protocol')),
                ('usage', models.ManyToManyField(to='tools_over.Usage')),
                ('userInterface', models.ManyToManyField(to='tools_over.UserInterface')),
            ],
        ),
    ]
