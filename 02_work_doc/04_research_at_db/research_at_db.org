In this file first steps how to do requests to the database of the django
project webcentral. The blocks could put into a file and run as python script.

autor: falk
date: March 2020

* Test org-python

#+BEGIN_SRC emacs-lisp :session python
(pyvenv-activate "/home/cudok/pyVenvs/ve_wc")
#+END_SRC

#+RESULTS:


#+NAME: Hello world org-python
#+BEGIN_SRC python :session python :results output
import pillow
print('Hello world')

#+END_SRC

#+RESULTS: Hello world org-python

#+RESULTS:
: Hello world

* Recherche
** https://www.youtube.com/watch?v=neW9Y9xh4jc
** https://www.geeksforgeeks.org/how-to-write-pandas-dataframe-to-postgresql-table/
** https://docs.sqlalchemy.org/en/14/core/engines.html
** SQL Abfragen: https://www.youtube.com/watch?v=phdWpI5VUWk
** https://pythontic.com/pandas/serialization/postgresql

*** Test code
**** set python environment (for org mode)
- terminal: source path/to/bin/active
#+BEGIN_SRC emacs-lisp :session py_wc
(pyvenv-activate "/home/cudok/pyVenvs/db_ana")
#+END_SRC

#+RESULTS:

*** read local database one table
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
#conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data3'
conn_string = 'postgresql://dbadmint:abc123@127.0.0.1:5432/m4_data3'
alchemeyEngine = create_engine(conn_string)

# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
df = pd.read_sql_table("weatherdata_over_weatherdata", conn)
df.info()
conn.close()
alchemeyEngine.dispose()
#+END_SRC

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 8 entries, 0 to 7
Data columns (total 13 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   id                   8 non-null      int64
 1   data_service         8 non-null      object
 2   short_description    8 non-null      object
 3   provider             8 non-null      object
 4   further_information  8 non-null      object
 5   data_url             8 non-null      object
 6   logo_url             8 non-null      object
 7   applications         8 non-null      object
 8   last_update          8 non-null      object
 9   license              8 non-null      object
 10  category             8 non-null      object
 11  image                8 non-null      object
 12  long_description     8 non-null      object
dtypes: int64(1), object(12)
memory usage: 960.0+ bytes
#+end_example

*** read local database query
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data3'
#conn_string = 'postgresql://adm_webcentral:M4_rocks_EWB@134.94.130.147:5432/db_webcentral3'
alchemeyEngine = create_engine(conn_string)


# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
## test the sql code and find the specific name of the tables, use pgadmin
## as wildcard use '%%xxx%%' instead of '%xxx%'
df = pd.read_sql_query(
   """
   SELECT id, data_service
   FROM weatherdata_over_weatherdata
   WHERE data_service LIKE '%%Open%%'
   """
   , conn)
print(df)

#+END_SRC

#+RESULTS:
:    id   data_service
: 0   1  Open Data DWD

*** read local database query include joins

- joins one table: https://www.w3schools.com/sql/sql_join.asp
- joins multiple table: https://www.sqlshack.com/learn-sql-join-multiple-tables/
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
#conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data3'
## remote access after config the server see [[remote_postgresql.org]
conn_string = 'postgresql://adm_webcentral:M4_rocks_EWB@134.94.130.147:5432/db_webcentral3'
alchemeyEngine = create_engine(conn_string)


# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
## test the sql code and find the specific name of the tables, use pgadmin
df = pd.read_sql_query(
   """
   SELECT project_listing_teilprojekt.fkz, project_listing_enargus.thema, project_listing_forschung.forschungsprogramm
   FROM project_listing_teilprojekt
   INNER JOIN project_listing_enargus
   ON project_listing_enargus.enargus_id = project_listing_teilprojekt.enargus_daten_id
   INNER JOIN project_listing_forschung ON  project_listing_forschung.forschung_id = project_listing_enargus.forschung_id
   WHERE kurzbeschreibung_de like '%%BIM%%'
   """
   , conn)
# df = pd.read_sql_query(
#    """
#    SELECT project_listing_teilprojekt.fkz, project_listing_enargus.thema
#    FROM project_listing_teilprojekt
#    INNER JOIN project_listing_enargus ON project_listing_enargus.enargus_id = project_listing_teilprojekt.enargus_daten_id
#    WHERE fkz like '03ETS002B'
#    """
#    , conn)
print(df)

#+END_SRC

#+RESULTS:
#+begin_example
          fkz  ...          forschungsprogramm
0   03ET1374C  ...  Energietechnologien (BMWi)
1   03ETW017F  ...        Erneuerbare Energien
2   03ET1290B  ...  Energietechnologien (BMWi)
3   03ET1592C  ...  Energietechnologien (BMWi)
4   03ET1592B  ...  Energietechnologien (BMWi)
..        ...  ...                         ...
64  03ET1413C  ...  Energietechnologien (BMWi)
65  03ET1413B  ...  Energietechnologien (BMWi)
66  03ET1466C  ...  Energietechnologien (BMWi)
67  03EN1050C  ...  Energietechnologien (BMWi)
68  03EN1004A  ...  Energietechnologien (BMWi)

[69 rows x 3 columns]
#+end_example
* Achtung Inner joins
- wenn der Eintrag des Primary key des Inner Joins 'null' ist, dann wird der Eintrag nicht betrachtet
- Verwendung von Full Join statt Inner Join behebt diese Problem


* Examples Project selection
** set python environment (for org mode)
- terminal: source path/to/bin/active
#+Begin_src Emacs-lisp :session py_wc
(pyvenv-activate "/home/cudok/pyVenvs/db_ana")
#+END_SRC

** select projects via Kurzbeschreibung
- read data from local data base
#+NAME: Projektauswahl via Kurzbeschreibung
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data2'
alchemeyEngine = create_engine(conn_string)

# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
df = pd.read_sql_query(
   """
   SELECT project_listing_teilprojekt.fkz,
          project_listing_enargus.thema,
          project_listing_enargus.kurzbeschreibung_de,
          project_listing_forschung.forschungsprogramm
   FROM project_listing_teilprojekt
     INNER JOIN project_listing_enargus
       ON project_listing_enargus.enargus_id = project_listing_teilprojekt.enargus_daten_id
     INNER JOIN project_listing_forschung
       ON  project_listing_forschung.forschung_id = project_listing_enargus.forschung_id
   WHERE (kurzbeschreibung_de ilike '%%BIM%%'
          OR kurzbeschreibung_de ilike '%%Building Information Modeling%%')
       AND (kurzbeschreibung_de ilike '%%Sanierung%%'
       OR kurzbeschreibung_de ilike '%%sanieren%%'
       OR kurzbeschreibung_de ilike '%%Bestand%%')
   """
   , conn)
df.info()
conn.close()
alchemeyEngine.dispose()
df.to_csv('projects_BIMBestand_kurz.csv')
print(df)
#+END_SRC

#+RESULTS: Projektauswahl via Kurzbeschreibung
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 23 entries, 0 to 22
Data columns (total 4 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   fkz                  23 non-null     object
 1   thema                23 non-null     object
 2   kurzbeschreibung_de  23 non-null     object
 3   forschungsprogramm   23 non-null     object
dtypes: object(4)
memory usage: 864.0+ bytes
           fkz  ...          forschungsprogramm
0    03ETW017F  ...        Erneuerbare Energien
1    03ET1290B  ...  Energietechnologien (BMWi)
2    03ET1260A  ...        Erneuerbare Energien
3    03ET1413C  ...  Energietechnologien (BMWi)
4    03ET1413E  ...  Energietechnologien (BMWi)
5    03ET1413F  ...  Energietechnologien (BMWi)
6    03EN1043A  ...  Energietechnologien (BMWi)
7    03EN1043B  ...  Energietechnologien (BMWi)
8    03EN1024C  ...  Energietechnologien (BMWi)
9    03EN1024B  ...  Energietechnologien (BMWi)
10   03EN1026E  ...  Energietechnologien (BMWi)
11   03ET1562B  ...  Energietechnologien (BMWi)
12  03SBE0003A  ...  Energietechnologien (BMWi)
13   03ET1298B  ...  Energietechnologien (BMWi)
14   03ET1298A  ...  Energietechnologien (BMWi)
15  03EGB0026F  ...  Energietechnologien (BMWi)
16   03EN1024A  ...  Energietechnologien (BMWi)
17   03ET1562A  ...  Energietechnologien (BMWi)
18   03ET1413B  ...  Energietechnologien (BMWi)
19   03ET1413D  ...  Energietechnologien (BMWi)
20  03SBE0003B  ...  Energietechnologien (BMWi)
21   03EN1004A  ...  Energietechnologien (BMWi)
22   03ET1413A  ...  Energietechnologien (BMWi)

[23 rows x 4 columns]
#+end_example

*** select projects via Kurzbeschreibung mit Inner Join
- Attention: no new projects are included
- read data from local data base
#+NAME: Projektauswahl via Kurzbeschreibung mit Inner Join Schlagworte
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data2'
alchemeyEngine = create_engine(conn_string)

# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
df_kurz_join = pd.read_sql_query(
   """
   SELECT project_listing_teilprojekt.fkz,
          project_listing_enargus.thema,
          project_listing_enargus.kurzbeschreibung_de,
          project_listing_forschung.forschungsprogramm
   FROM project_listing_teilprojekt
     INNER JOIN project_listing_enargus
       ON project_listing_enargus.enargus_id = project_listing_teilprojekt.enargus_daten_id
     INNER JOIN project_listing_forschung
       ON  project_listing_forschung.forschung_id = project_listing_enargus.forschung_id
      INNER JOIN schlagwoerter_schlagwortregister_erstsichtung
       ON  schlagwoerter_schlagwortregister_erstsichtung.schlagwortregister_id = project_listing_teilprojekt.schlagwortregister_erstsichtung_id
  WHERE (kurzbeschreibung_de ilike '%%BIM%%'
          OR kurzbeschreibung_de ilike '%%Building Information Modeling%%')
       AND (kurzbeschreibung_de ilike '%%Sanierung%%'
       OR kurzbeschreibung_de ilike '%%sanieren%%'
       OR kurzbeschreibung_de ilike '%%Bestand%%')
   """
   , conn)
df_kurz_join.info()
conn.close()
alchemeyEngine.dispose()
df_kurz_join.to_csv('projects_BIMBestand_kurz_join.csv')
print(df_kurz_join)
#+END_SRC

#+RESULTS: Projektauswahl via Kurzbeschreibung mit Inner Join Schlagworte
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 14 entries, 0 to 13
Data columns (total 4 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   fkz                  14 non-null     object
 1   thema                14 non-null     object
 2   kurzbeschreibung_de  14 non-null     object
 3   forschungsprogramm   14 non-null     object
dtypes: object(4)
memory usage: 576.0+ bytes
           fkz  ...          forschungsprogramm
0   03EGB0026F  ...  Energietechnologien (BMWi)
1    03ET1562B  ...  Energietechnologien (BMWi)
2    03ET1562A  ...  Energietechnologien (BMWi)
3    03ET1413C  ...  Energietechnologien (BMWi)
4    03ET1413E  ...  Energietechnologien (BMWi)
5    03ET1413F  ...  Energietechnologien (BMWi)
6    03ET1413B  ...  Energietechnologien (BMWi)
7    03ET1413D  ...  Energietechnologien (BMWi)
8    03ET1413A  ...  Energietechnologien (BMWi)
9    03EN1004A  ...  Energietechnologien (BMWi)
10  03SBE0003A  ...  Energietechnologien (BMWi)
11  03SBE0003B  ...  Energietechnologien (BMWi)
12   03ETW017F  ...        Erneuerbare Energien
13   03EN1026E  ...  Energietechnologien (BMWi)

[14 rows x 4 columns]
#+end_example

** Vergleich Projekte mit/ohne Inner Join Schlagworte
#+NAME: Vergleich mit/ohne Inner Join
#+BEGIN_SRC python :session py_wc :results output


#df_diff = pd.concat([df, df_kurz_join]).drop_duplicates()
df_diff = pd.concat([df, df_kurz_join]).drop_duplicates(keep=False)
print('Folgende Projekte sind gehören nur zur Auswahl ohne Inner Join: ')
print(df_diff)

#+END_SRC

#+RESULTS: Vergleich mit/ohne Inner Join
#+begin_example
Folgende Projekte sind gehören nur zur Auswahl ohne Inner Join:
          fkz  ...          forschungsprogramm
1   03ET1290B  ...  Energietechnologien (BMWi)
2   03ET1260A  ...        Erneuerbare Energien
6   03EN1043A  ...  Energietechnologien (BMWi)
7   03EN1043B  ...  Energietechnologien (BMWi)
8   03EN1024C  ...  Energietechnologien (BMWi)
9   03EN1024B  ...  Energietechnologien (BMWi)
13  03ET1298B  ...  Energietechnologien (BMWi)
14  03ET1298A  ...  Energietechnologien (BMWi)
16  03EN1024A  ...  Energietechnologien (BMWi)

[9 rows x 4 columns]
#+end_example

*** select projects via 1st Sichtung mit Inner Join
- Attention: no new projects are included
- read data from local data base
#+NAME: Projektauswahl via 1. Sichtung
#+BEGIN_SRC python :session py_wc :results output

# Example python program to read data from a PostgreSQL table
# and load into a pandas DataFrame
import psycopg2
import pandas as pd
from sqlalchemy import create_engine

# Create an engine instance
conn_string = 'postgresql://dbadmint:abc123@localhost:5432/m4_data2'
alchemeyEngine = create_engine(conn_string)

# connect to PostgreSQL server
conn = alchemeyEngine.connect()

# Read data from PostgreSQL database table and load into a DataFrame instance
df_1st_join = pd.read_sql_query(
   """
   SELECT project_listing_teilprojekt.fkz,
          project_listing_enargus.thema,
          project_listing_enargus.kurzbeschreibung_de,
          project_listing_forschung.forschungsprogramm,
          sw_1st.schlagwort_1_id,
          sw_1.schlagwort AS schlagwort_1,
          sw_2.schlagwort AS schlagwort_2,
          sw_3.schlagwort AS schlagwort_3,
          sw_4.schlagwort AS schlagwort_4,
          sw_5.schlagwort AS schlagwort_5,
          sw_6.schlagwort AS schlagwort_6,
          sw_7.schlagwort AS schlagwort_7
   FROM project_listing_teilprojekt
     INNER JOIN project_listing_enargus
       ON project_listing_enargus.enargus_id = project_listing_teilprojekt.enargus_daten_id
     INNER JOIN project_listing_forschung
       ON  project_listing_forschung.forschung_id = project_listing_enargus.forschung_id
     FULL JOIN schlagwoerter_schlagwortregister_erstsichtung AS sw_1st
       ON  sw_1st.schlagwortregister_id = project_listing_teilprojekt.schlagwortregister_erstsichtung_id
     FULL JOIN schlagwoerter_schlagwort AS sw_1
       ON sw_1.schlagwort_id = sw_1st.schlagwort_1_id
     FULL JOIN schlagwoerter_schlagwort AS sw_2
       ON sw_2.schlagwort_id = sw_1st.schlagwort_2_id
     FULL JOIN schlagwoerter_schlagwort AS sw_3
       ON sw_3.schlagwort_id = sw_1st.schlagwort_3_id
     FULL JOIN schlagwoerter_schlagwort AS sw_4
       ON sw_4.schlagwort_id = sw_1st.schlagwort_4_id
     FULL JOIN schlagwoerter_schlagwort AS sw_5
       ON sw_5.schlagwort_id = sw_1st.schlagwort_5_id
     FULL JOIN schlagwoerter_schlagwort AS sw_6
       ON sw_6.schlagwort_id = sw_1st.schlagwort_6_id
     FULL JOIN schlagwoerter_schlagwort AS sw_7
       ON sw_7.schlagwort_id = sw_1st.schlagwort_7_id
   WHERE (kurzbeschreibung_de ilike '%%BIM%%'
          OR kurzbeschreibung_de ilike '%%Building Information Modeling%%')
       AND (kurzbeschreibung_de ilike '%%Sanierung%%'
       OR kurzbeschreibung_de ilike '%%sanieren%%'
       OR kurzbeschreibung_de ilike '%%Bestand%%')
   """
   , conn)
df_1st_join.info()
conn.close()
alchemeyEngine.dispose()
df_1st_join.to_csv('projects_BIMBestand_1st.csv')
print(df_1st_join)
#+END_SRC

#+RESULTS: Projektauswahl via 1. Sichtung
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 23 entries, 0 to 22
Data columns (total 12 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   fkz                  23 non-null     object
 1   thema                23 non-null     object
 2   kurzbeschreibung_de  23 non-null     object
 3   forschungsprogramm   23 non-null     object
 4   schlagwort_1_id      14 non-null     float64
 5   schlagwort_1         14 non-null     object
 6   schlagwort_2         14 non-null     object
 7   schlagwort_3         14 non-null     object
 8   schlagwort_4         14 non-null     object
 9   schlagwort_5         14 non-null     object
 10  schlagwort_6         14 non-null     object
 11  schlagwort_7         14 non-null     object
dtypes: float64(1), object(11)
memory usage: 2.3+ KB
           fkz                                              thema  ... schlagwort_6 schlagwort_7
0    03ETW017F  Verbundprojekt: TABSOLAR III - Wirtschaftliche...  ...
1    03ET1290B  EnOB: Verbundvorhaben: SolConPro: Ganzheitlich...  ...         None         None
2    03ET1260A  EnEff:Stadt, EnEff:Campus: RoadMap RWTH Aachen...  ...         None         None
3    03ET1413C  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...
4    03ET1413E  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...
5    03ET1413F  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...
6    03EN1043A  Verbundvorhaben: EnOB: BIMpact - Entwicklung e...  ...         None         None
7    03EN1043B  Verbundvorhaben: EnOB: BIMpact - Entwicklung e...  ...         None         None
8    03EN1024C  Verbundvorhaben: ENOB: BIM_Scan_Modeler - Erke...  ...         None         None
9    03EN1024B  Verbundvorhaben: ENOB: BIM_Scan_Modeler - Erke...  ...         None         None
10   03EN1026E  Verbundvorhaben: EnOB: EnergyTWIN - Energiedia...  ...
11   03ET1562B  EnOB: BIM2SIM - Methodenentwicklung zur Erstel...  ...          LCA
12  03SBE0003A  SolaresBauen: PV-HoWoSan - Entwicklung und Dem...  ...
13   03ET1298B  EnOB Verbundvorhaben: ZUGABE: Zukünftige Hydra...  ...         None         None
14   03ET1298A  Verbundvorhaben: EnOB: ZUGABE: Zukünftige hydr...  ...         None         None
15  03EGB0026F  Verbundvorhaben: EG2050: ISWK-Innovatives Stro...  ...
16   03EN1024A  Verbundvorhaben: ENOB: BIM_Scan_Modeler - Erke...  ...         None         None
17   03ET1562A  EnOB: BIM2SIM - Methodenentwicklung zur Erstel...  ...          LCA
18   03ET1413B  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...
19   03ET1413D  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...
20  03SBE0003B  SolaresBauen: PV-HoWoSan - Entwicklung und Dem...  ...
21   03EN1004A  EnOB: EnergieeffBaeder - Energieeffizienz und ...  ...
22   03ET1413A  EnEff:Stadt - Verbundvorhaben: Aggregationspla...  ...

[23 rows x 12 columns]
#+end_example



* ORM - object relation mapping
- Attention there is another usage of this acronym: object role modeling
  https://en.wikipedia.org/wiki/Object-role_modeling
- wiki: https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping
